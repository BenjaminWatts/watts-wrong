name: Build and Deploy Book

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build-all-formats:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended texlive-extra-utils texlive-latex-extra ffmpeg espeak python3-pip
        # Install WeasyPrint for better PDF generation
        pip3 install weasyprint
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Verify assets and cover image
      run: |
        echo "üîç Verifying required assets..."
        if [ ! -f "assets/covers/watts-wrong-cover.png" ]; then
          echo "‚ùå Cover image not found at assets/covers/watts-wrong-cover.png"
          exit 1
        fi
        echo "‚úÖ Cover image found"
        ls -la assets/covers/
        echo "‚úÖ Assets verification complete"
      
    - name: Build all formats
      run: |
        echo "üöÄ Building all book formats..."
        
        # Build website first (most important for GitHub Pages)
        echo "üì± Building website..."
        npm run build:website
        
        # Build EPUB
        echo "üìö Building EPUB..."
        npm run build:epub || echo "‚ö†Ô∏è EPUB build failed, continuing..."
        
        # Build Kindle
        echo "üì± Building Kindle (MOBI)..."
        npm run build:kindle || echo "‚ö†Ô∏è Kindle build failed, continuing..."
        
        # Build PDF
        echo "üìÑ Building PDF..."
        npm run build:pdf || echo "‚ö†Ô∏è PDF build failed, continuing..."
        
        # Build audiobook (local TTS)
        echo "üéß Building audiobook..."
        npm run build:audiobook || echo "‚ö†Ô∏è Audiobook build failed, continuing..."
        
        # List what was built
        echo "‚úÖ Build completed. Contents of dist directory:"
        ls -la dist/
        echo "üìÅ Website contents:"
        ls -la dist/website/ || echo "Website directory not found"
        echo "üìö Ebook contents:"
        ls -la dist/*.epub dist/*.mobi dist/*.pdf 2>/dev/null || echo "No ebooks found"
        echo "üéß Audiobook contents:"
        ls -la dist/audiobook/ 2>/dev/null || echo "No audiobook found"
        
    - name: Create release assets
      run: |
        echo "üì¶ Creating release assets..."
        
        # Create a releases directory
        mkdir -p dist/releases
        
        # Copy ebooks to releases
        if [ -f "dist/watts-wrong.epub" ]; then
          cp dist/watts-wrong.epub dist/releases/
          echo "‚úÖ EPUB copied to releases"
        fi
        
        if [ -f "dist/watts-wrong.mobi" ]; then
          cp dist/watts-wrong.mobi dist/releases/
          echo "‚úÖ MOBI copied to releases"
        fi
        
        if [ -f "dist/watts-wrong.pdf" ]; then
          cp dist/watts-wrong.pdf dist/releases/
          echo "‚úÖ PDF copied to releases"
        fi
        
        # Create audiobook archive
        if [ -d "dist/audiobook" ]; then
          cd dist/audiobook
          tar -czf ../releases/watts-wrong-audiobook.tar.gz *.aiff *.mp3 chapters.json 2>/dev/null || echo "‚ö†Ô∏è No audio files to archive"
          cd ../..
          echo "‚úÖ Audiobook archive created"
        fi
        
        # Create individual chapter downloads
        if [ -d "dist/audiobook" ]; then
          mkdir -p dist/releases/audiobook-chapters
          cd dist/audiobook
          for file in *.aiff *.mp3; do
            if [ -f "$file" ]; then
              cp "$file" ../releases/audiobook-chapters/
            fi
          done
          cd ../..
          echo "‚úÖ Individual audio chapters copied"
        fi
        
        echo "üìÅ Release assets created:"
        ls -la dist/releases/
        
    - name: Verify website build
      run: |
        if [ ! -f "dist/website/index.html" ]; then
          echo "‚ùå Website build failed - index.html not found"
          exit 1
        fi
        echo "‚úÖ Website build verified successfully"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload website artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist/website'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: github.ref == 'refs/heads/main'
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: book-formats
        path: |
          dist/releases/
          dist/website/
        retention-days: 30
        
  create-release:
    needs: build-all-formats
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: book-formats
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/releases/*.epub
          dist/releases/*.mobi
          dist/releases/*.pdf
          dist/releases/*.tar.gz
          dist/releases/audiobook-chapters/*
        draft: false
        prerelease: false 